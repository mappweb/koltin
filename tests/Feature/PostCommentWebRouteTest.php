<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Comment;
use App\Models\Post;
use App\Models\User;
use Database\Factories\PostCommentFactory;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PostCommentWebRouteTest extends TestCase
{
    use WithFaker;

    /**
     * @var User|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    protected User $user;
    /**
     * @var Post|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    protected Post $post;
    /**
     * @var Comment|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    protected Comment $comment;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /**
         * @var User $user
         */
        $this->user = User::factory()->create();
        $this->post = Post::factory()->create();
        $this->comment = Comment::factory(
            app(PostCommentFactory::class)->definition()
        )->create();
    }

    /**
     * Get modal create
     *
     * @return void
     */
    public function test_get_modal_create()
    {
        $route = route('comments.create', ['post' => $this->post->id]);
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->get($route);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Get modal edit
     *
     * @return void
     */
    public function test_get_modal_edit()
    {
        $route = route('comments.edit', ['comment' => $this->comment->id]);
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->get($route);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Store a newly created comment in storage
     *
     * @return void
     */
    public function test_post_comment_create()
    {
        $data = [
            'post_id' => $this->post->id,
            'content' => fake()->paragraph(),
        ];
        $route = route('comments.store');
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->post($route, $data);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Update the specified comment in storage.
     *
     * @return void
     */
    public function test_post_comment_update()
    {
        $data = [
            'post_id' => $this->post->id,
            'content' => fake()->paragraph(),
        ];
        $route = route('comments.update', ['comment' => $this->comment->id]);
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->put($route, $data);
        // Assert the expected response status
        $response->assertStatus(200);
    }

}

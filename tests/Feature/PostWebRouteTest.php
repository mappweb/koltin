<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Post;
use App\Models\User;
use Database\Factories\PostFactory;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PostWebRouteTest extends TestCase
{
    use WithFaker;

    /**
     * @var User|\Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    protected User $user;
    protected Post $post;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /**
         * @var User $user
         */
        $this->user = User::factory()->create();
        $this->post = Post::factory(PostFactory::class)
            ->create();
    }

    /**
     * Get modal create
     *
     * @return void
     */
    public function test_get_modal_create()
    {
        $route = route('posts.create');
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->get($route);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Get modal edit
     *
     * @return void
     */
    public function test_get_modal_edit()
    {
        $route = route('posts.edit', ['post' => $this->post->id]);
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->get($route);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Store a newly created post in storage
     *
     * @return void
     */
    public function test_post_create()
    {
        $data = [
            'title' => $this->faker->title,
            'content' => $this->faker->paragraph
        ];
        $route = route('posts.store');
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->post($route, $data);
        // Assert the expected response status
        $response->assertStatus(200);
    }

    /**
     * Update the specified post in storage.
     *
     * @return void
     */
    public function test_post_update()
    {
        $data = [
            'title' => $this->faker->title,
            'content' => $this->faker->paragraph
        ];
        $route = route('posts.update', ['post' => $this->post->id]);
        // Try to access the page
        $response = $this->actingAs($this->user)
            ->put($route, $data);
        // Assert the expected response status
        $response->assertStatus(200);
    }

}
